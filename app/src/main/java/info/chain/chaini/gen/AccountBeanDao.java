package info.chain.chaini.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_BEAN".
*/
public class AccountBeanDao extends AbstractDao<AccountBean, Long> {

    public static final String TABLENAME = "ACCOUNT_BEAN";

    /**
     * Properties of entity AccountBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account_name = new Property(1, String.class, "account_name", false, "ACCOUNT_NAME");
        public final static Property Account_info = new Property(2, String.class, "account_info", false, "ACCOUNT_INFO");
        public final static Property Account_icon = new Property(3, String.class, "account_icon", false, "ACCOUNT_ICON");
        public final static Property Account_icon_id = new Property(4, Long.class, "account_icon_id", false, "ACCOUNT_ICON_ID");
        public final static Property Master = new Property(5, Long.class, "master", false, "MASTER");
        public final static Property Chain_id = new Property(6, Long.class, "chain_id", false, "CHAIN_ID");
        public final static Property User_id = new Property(7, Long.class, "user_id", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<AccountBean> chainBean_AccountsQuery;

    public AccountBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AccountBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT_NAME\" TEXT," + // 1: account_name
                "\"ACCOUNT_INFO\" TEXT," + // 2: account_info
                "\"ACCOUNT_ICON\" TEXT," + // 3: account_icon
                "\"ACCOUNT_ICON_ID\" INTEGER," + // 4: account_icon_id
                "\"MASTER\" INTEGER," + // 5: master
                "\"CHAIN_ID\" INTEGER," + // 6: chain_id
                "\"USER_ID\" INTEGER);"); // 7: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account_name = entity.getAccount_name();
        if (account_name != null) {
            stmt.bindString(2, account_name);
        }
 
        String account_info = entity.getAccount_info();
        if (account_info != null) {
            stmt.bindString(3, account_info);
        }
 
        String account_icon = entity.getAccount_icon();
        if (account_icon != null) {
            stmt.bindString(4, account_icon);
        }
 
        Long account_icon_id = entity.getAccount_icon_id();
        if (account_icon_id != null) {
            stmt.bindLong(5, account_icon_id);
        }
 
        Long master = entity.getMaster();
        if (master != null) {
            stmt.bindLong(6, master);
        }
 
        Long chain_id = entity.getChain_id();
        if (chain_id != null) {
            stmt.bindLong(7, chain_id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(8, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account_name = entity.getAccount_name();
        if (account_name != null) {
            stmt.bindString(2, account_name);
        }
 
        String account_info = entity.getAccount_info();
        if (account_info != null) {
            stmt.bindString(3, account_info);
        }
 
        String account_icon = entity.getAccount_icon();
        if (account_icon != null) {
            stmt.bindString(4, account_icon);
        }
 
        Long account_icon_id = entity.getAccount_icon_id();
        if (account_icon_id != null) {
            stmt.bindLong(5, account_icon_id);
        }
 
        Long master = entity.getMaster();
        if (master != null) {
            stmt.bindLong(6, master);
        }
 
        Long chain_id = entity.getChain_id();
        if (chain_id != null) {
            stmt.bindLong(7, chain_id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(8, user_id);
        }
    }

    @Override
    protected final void attachEntity(AccountBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountBean readEntity(Cursor cursor, int offset) {
        AccountBean entity = new AccountBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account_info
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // account_icon
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // account_icon_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // master
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // chain_id
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccount_info(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccount_icon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccount_icon_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMaster(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setChain_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUser_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "accounts" to-many relationship of ChainBean. */
    public List<AccountBean> _queryChainBean_Accounts(Long chain_id) {
        synchronized (this) {
            if (chainBean_AccountsQuery == null) {
                QueryBuilder<AccountBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Chain_id.eq(null));
                chainBean_AccountsQuery = queryBuilder.build();
            }
        }
        Query<AccountBean> query = chainBean_AccountsQuery.forCurrentThread();
        query.setParameter(0, chain_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChainBeanDao().getAllColumns());
            builder.append(" FROM ACCOUNT_BEAN T");
            builder.append(" LEFT JOIN CHAIN_BEAN T0 ON T.\"CHAIN_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AccountBean loadCurrentDeep(Cursor cursor, boolean lock) {
        AccountBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ChainBean chain = loadCurrentOther(daoSession.getChainBeanDao(), cursor, offset);
        entity.setChain(chain);

        return entity;    
    }

    public AccountBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AccountBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AccountBean> list = new ArrayList<AccountBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AccountBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AccountBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
