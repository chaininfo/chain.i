package info.chain.chaini.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_uid = new Property(1, String.class, "user_uid", false, "USER_UID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_img = new Property(3, String.class, "user_img", false, "USER_IMG");
        public final static Property User_phone = new Property(4, String.class, "user_phone", false, "USER_PHONE");
        public final static Property Chain_init = new Property(5, Long.class, "chain_init", false, "CHAIN_INIT");
        public final static Property Account_init = new Property(6, Long.class, "account_init", false, "ACCOUNT_INIT");
        public final static Property Account_token_init = new Property(7, Long.class, "account_token_init", false, "ACCOUNT_TOKEN_INIT");
        public final static Property Token_init = new Property(8, Long.class, "token_init", false, "TOKEN_INIT");
        public final static Property App_init = new Property(9, Long.class, "app_init", false, "APP_INIT");
        public final static Property Wallet_init = new Property(10, Long.class, "wallet_init", false, "WALLET_INIT");
        public final static Property User_info = new Property(11, String.class, "user_info", false, "USER_INFO");
    }

    private DaoSession daoSession;


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_UID\" TEXT," + // 1: user_uid
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"USER_IMG\" TEXT," + // 3: user_img
                "\"USER_PHONE\" TEXT," + // 4: user_phone
                "\"CHAIN_INIT\" INTEGER," + // 5: chain_init
                "\"ACCOUNT_INIT\" INTEGER," + // 6: account_init
                "\"ACCOUNT_TOKEN_INIT\" INTEGER," + // 7: account_token_init
                "\"TOKEN_INIT\" INTEGER," + // 8: token_init
                "\"APP_INIT\" INTEGER," + // 9: app_init
                "\"WALLET_INIT\" INTEGER," + // 10: wallet_init
                "\"USER_INFO\" TEXT);"); // 11: user_info
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_uid = entity.getUser_uid();
        if (user_uid != null) {
            stmt.bindString(2, user_uid);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_img = entity.getUser_img();
        if (user_img != null) {
            stmt.bindString(4, user_img);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(5, user_phone);
        }
 
        Long chain_init = entity.getChain_init();
        if (chain_init != null) {
            stmt.bindLong(6, chain_init);
        }
 
        Long account_init = entity.getAccount_init();
        if (account_init != null) {
            stmt.bindLong(7, account_init);
        }
 
        Long account_token_init = entity.getAccount_token_init();
        if (account_token_init != null) {
            stmt.bindLong(8, account_token_init);
        }
 
        Long token_init = entity.getToken_init();
        if (token_init != null) {
            stmt.bindLong(9, token_init);
        }
 
        Long app_init = entity.getApp_init();
        if (app_init != null) {
            stmt.bindLong(10, app_init);
        }
 
        Long wallet_init = entity.getWallet_init();
        if (wallet_init != null) {
            stmt.bindLong(11, wallet_init);
        }
 
        String user_info = entity.getUser_info();
        if (user_info != null) {
            stmt.bindString(12, user_info);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_uid = entity.getUser_uid();
        if (user_uid != null) {
            stmt.bindString(2, user_uid);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_img = entity.getUser_img();
        if (user_img != null) {
            stmt.bindString(4, user_img);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(5, user_phone);
        }
 
        Long chain_init = entity.getChain_init();
        if (chain_init != null) {
            stmt.bindLong(6, chain_init);
        }
 
        Long account_init = entity.getAccount_init();
        if (account_init != null) {
            stmt.bindLong(7, account_init);
        }
 
        Long account_token_init = entity.getAccount_token_init();
        if (account_token_init != null) {
            stmt.bindLong(8, account_token_init);
        }
 
        Long token_init = entity.getToken_init();
        if (token_init != null) {
            stmt.bindLong(9, token_init);
        }
 
        Long app_init = entity.getApp_init();
        if (app_init != null) {
            stmt.bindLong(10, app_init);
        }
 
        Long wallet_init = entity.getWallet_init();
        if (wallet_init != null) {
            stmt.bindLong(11, wallet_init);
        }
 
        String user_info = entity.getUser_info();
        if (user_info != null) {
            stmt.bindString(12, user_info);
        }
    }

    @Override
    protected final void attachEntity(UserBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_phone
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // chain_init
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // account_init
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // account_token_init
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // token_init
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // app_init
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // wallet_init
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // user_info
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_uid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_phone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChain_init(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAccount_init(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAccount_token_init(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setToken_init(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setApp_init(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setWallet_init(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setUser_info(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
