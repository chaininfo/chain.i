package info.chain.chaini.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_TOKEN_BEAN".
*/
public class AccountTokenBeanDao extends AbstractDao<AccountTokenBean, Long> {

    public static final String TABLENAME = "ACCOUNT_TOKEN_BEAN";

    /**
     * Properties of entity AccountTokenBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account_id = new Property(1, Long.class, "account_id", false, "ACCOUNT_ID");
        public final static Property Token_id = new Property(2, Long.class, "token_id", false, "TOKEN_ID");
        public final static Property Token_balance = new Property(3, Double.class, "token_balance", false, "TOKEN_BALANCE");
        public final static Property Token_info = new Property(4, String.class, "token_info", false, "TOKEN_INFO");
        public final static Property Master = new Property(5, Long.class, "master", false, "MASTER");
    }

    private DaoSession daoSession;

    private Query<AccountTokenBean> accountBean_AccounttokenBeansQuery;

    public AccountTokenBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AccountTokenBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_TOKEN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT_ID\" INTEGER," + // 1: account_id
                "\"TOKEN_ID\" INTEGER," + // 2: token_id
                "\"TOKEN_BALANCE\" REAL," + // 3: token_balance
                "\"TOKEN_INFO\" TEXT," + // 4: token_info
                "\"MASTER\" INTEGER);"); // 5: master
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_TOKEN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountTokenBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long account_id = entity.getAccount_id();
        if (account_id != null) {
            stmt.bindLong(2, account_id);
        }
 
        Long token_id = entity.getToken_id();
        if (token_id != null) {
            stmt.bindLong(3, token_id);
        }
 
        Double token_balance = entity.getToken_balance();
        if (token_balance != null) {
            stmt.bindDouble(4, token_balance);
        }
 
        String token_info = entity.getToken_info();
        if (token_info != null) {
            stmt.bindString(5, token_info);
        }
 
        Long master = entity.getMaster();
        if (master != null) {
            stmt.bindLong(6, master);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountTokenBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long account_id = entity.getAccount_id();
        if (account_id != null) {
            stmt.bindLong(2, account_id);
        }
 
        Long token_id = entity.getToken_id();
        if (token_id != null) {
            stmt.bindLong(3, token_id);
        }
 
        Double token_balance = entity.getToken_balance();
        if (token_balance != null) {
            stmt.bindDouble(4, token_balance);
        }
 
        String token_info = entity.getToken_info();
        if (token_info != null) {
            stmt.bindString(5, token_info);
        }
 
        Long master = entity.getMaster();
        if (master != null) {
            stmt.bindLong(6, master);
        }
    }

    @Override
    protected final void attachEntity(AccountTokenBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountTokenBean readEntity(Cursor cursor, int offset) {
        AccountTokenBean entity = new AccountTokenBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // account_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // token_id
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // token_balance
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // token_info
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // master
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountTokenBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setToken_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setToken_balance(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setToken_info(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMaster(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountTokenBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountTokenBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountTokenBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "accounttokenBeans" to-many relationship of AccountBean. */
    public List<AccountTokenBean> _queryAccountBean_AccounttokenBeans(Long account_id) {
        synchronized (this) {
            if (accountBean_AccounttokenBeansQuery == null) {
                QueryBuilder<AccountTokenBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Account_id.eq(null));
                accountBean_AccounttokenBeansQuery = queryBuilder.build();
            }
        }
        Query<AccountTokenBean> query = accountBean_AccounttokenBeansQuery.forCurrentThread();
        query.setParameter(0, account_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTokenBeanDao().getAllColumns());
            builder.append(" FROM ACCOUNT_TOKEN_BEAN T");
            builder.append(" LEFT JOIN TOKEN_BEAN T0 ON T.\"TOKEN_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AccountTokenBean loadCurrentDeep(Cursor cursor, boolean lock) {
        AccountTokenBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TokenBean token = loadCurrentOther(daoSession.getTokenBeanDao(), cursor, offset);
        entity.setToken(token);

        return entity;    
    }

    public AccountTokenBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AccountTokenBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AccountTokenBean> list = new ArrayList<AccountTokenBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AccountTokenBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AccountTokenBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
